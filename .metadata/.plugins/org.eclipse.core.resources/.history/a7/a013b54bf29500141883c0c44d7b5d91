/*
 * RpcServer.cpp
 *
 *  Created on: Jan 6, 2015
 *      Author: slawek
 */

void RpcServer::run()
{
	connectionList conns = localAcceptor.getConnections();
	if (!conns.empty())
	{
		for(connectionList::iterator ii = conns.begin(); ii != conns.end(); ii++)
		{
			newConnections.push_back(*ii);
		}
	}

	for(connectionList::iterator ii = newConnections.begin(); ii != newConnections.end(); ii++)
	{
		pValue pJsonValue(0);
		try
		{
			if((*ii)->popJsonData(pJsonValue))
			{
				int nodeId = pJsonValue->get("nodeId", 0).asInt();
				if (nodeId != 0)
				{
					localConnections[nodeId] = *ii;

					//TODO local NODE list has changed - brodcast it to other gateways

				}
				newConnections.erase(ii); // remove connection from new connection list
				break;
			}
		}
		catch (std::runtime_error & e) // connection lost
		{
			newConnections.erase(ii); // remove connection from connection list
			break;
		}
	}

	for(connectionList::iterator ii = localConnections.begin(); ii != localConnections.end(); ii++)
	{
		pValue pJsonValue(0);
		try
		{
			if((*ii)->popJsonData(pJsonValue))
			{
				int nodeId = pJsonValue->get("nodeId", 0).asInt();
				if (nodeId != 0)
				{
					localConnections[nodeId] = *ii;

					//TODO local NODE list has changed - brodcast it to other gateways

				}
			}
		}
		catch (std::runtime_error & e) // connection lost
		{
			newConnections.erase(ii); // remove connection from connection list
			break;
		}
	}

}


